in the last lecture you learn about the equality operator now technically in JavaScript we have another equality operator that is indicated by two equal sides instead of three equal sides so you might be wondering what the difference is well first of all what we have on the top is what we refer to as strict equality operator what we have on the bottom is what we call lose equality operator now this strictly operator in shorts that both these values we have on the side of this operator have the same time and the same value what do you mean by that well in this example on both sides of this operator we have two numbers so they're type as well as their value are equal so if you save the changes we get true and true now let's take a look at another example this time I'm going to change one of these numbers to a string if I save the changes this expression is going to evaluate to false because you're comparing a string with a number so the types here do not match that's why I will get false let's have a look same and here's false right so the strict equality operator and shorts that both are friends are of the same time and have the same value now lose equality operator behaves differently so to focus on this operator I'm going to comment out these two lines so here we're comparing one with one and we get true now what if you compare one as a string with one we still get true in contrast in the previous example we got false so let's see what's happening here in this case this operator looks at the value on the left side here we have a string so it will automatically convert what we have on the right side of your string so it will look like this and now because these values are exactly the same we get true on the console now what if on the left side we have a Boolean well this operator looks at what we have on the left side because it's a Boolean it will automatically convert the value on the right side to Boolean so it's like comparing true with true and if the same the changes again we get true so here's what you need to take away the strict equality operator ensures that both values have the same time and the same value the loose equality operator doesn't care about the types matching if the types don't match it will convert the type of what we have on the right side to match what we have on the left side and then it will only check if the values are equal now most of the time you should be using the strict equality operator because it's more precise and accurate