all right now let's take a look at the logical operators we use this operators to make decisions based on multiple conditions in JavaScript we have three types of logical operators logical and logical or and not let's see each of these operators in action so I'm going to start with the logical and which is indicated by two ampersands so here's the basic rule of thumb this logical and returns true if Bulls operands are true what do you mean by that well let's play console that log true and true so we have two operands they're both true so the result of evaluating this expression will be true let's have a look on the console look here we get true now if either of these is false the result will be false so I'm going to change this to false save the changes on the console it doesn't matter which one is false if I make the other one Falls or both of them Falls will still get false so logical and returns true if both parents are true it might be asking what is a real word use case for this operator well let's imagine we want to build an application for approving loans so we want to see if the applicant has high income and good credit score then they will be eligible for loan so I'm going to delete all this and declare a couple of variables High income we're going to set that to true and good credit score they're going to send that to true as well so here we are dealing with two conditions we want to make sure that the applicant has high income and good credit score that's where we use the logical and so we can declare another variable eligible for loan and this is where we use the logical and operator so high income and good credit score now if you lock this on the console eligible for loan we should get through and he was a result now let's take a look at the logical or so logical or is indicated by two vertical lines and this returns true if one of the operands is true it doesn't matter which one what are the one on the left or the one on the right or both of them as long as we have one true operand the result of this expression will be true so here's an example I'm going to replace this logical and with logical or in this case both options are true so the result of this expression will also be true let's have a look so I'm going to save the changes we get true if I change one of these to false we still get through it doesn't matter which one is true as long as we have one operant in this expression that evaluates to true the result of this expression will also be true so this is how we use the logical order and finally let's look at the not operator that is indicated by an exclamation mark so let's imagine if the applicant is not eligible for loan you want to consider their application as refused so we can declare another variable application refused here we use the not operator we apply it on eligible for loan so this is what happens here if eligible for loan is true it's not to operator will convert that to false so what ever we give it it will give us the opposite in this case if eligible for loan is true this will convert that to false and application refused will be false because if someone is eligible for loan we don't want to refuse their application right so application refused is always the opposite of eligible for loan and that's where we use the not operator so let's see this in action I'm going to change both this conditions to false so we're dealing with someone who has low income and bad credit score obviously they are not eligible for loan so let's lock this on the console eligible for loan and can also add a label so I'm going to let us drink eligible and here we have come on then we apply to operator to set the application refused variable let's do another console.log application refused and here we log application refused variable now let's see what we get on the console so save the changes you can see this applicant is not eligible because eligible is false and application refused is true because it's always the opposite of eligible for long