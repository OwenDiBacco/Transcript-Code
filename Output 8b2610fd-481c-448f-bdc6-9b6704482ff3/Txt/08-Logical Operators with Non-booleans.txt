in the last lecture I can learn about logical operators in all the examples you saw in the last lecture we use this logical operators with Boolean values but in JavaScript unlike many other programming languages we can use this logical operators with non Boolean values and that's extremely powerful let me show you a few examples let's say we have false or true what do you think is the result of this expression well it's true right now what if we have false or the string mosh what do you think is the result of this expression well let's take a look we get Marsh back what if we have phones or number one get number one back so here's the first thing you need to realize the result of a logical expression is not necessarily a true or false that depends on the value of the operands we have in the first example are second operand is true that's why we get true back in the second example are second operand is a string that's why we get a string back and by the same token in the third example we get a number back so when are JavaScript engine tries to evaluate this expression it looks at each operand if the Opera is not a Boolean true or false it will try to interpret it as what we call Tracy or false sea so in JavaScript we have is values which refer to as falsie that's not a Boolean false it's false sea what are these positive values well we have undefined no number zero the Boolean Falls an empty string and not a number now we haven't talked about this yet that's going to come later in the course for now just remember not a number is a special value in JavaScript and when we are dealing with a mathematical calculation that does not produce a valid number this value is return not a number now we're going to look at that later in the course so don't worry about it so these are the values in JavaScript if you use any of these values in The Logical expression they will be treated as falsie which is kind of like a Boolean false but it's not exactly the same now anything that is not falsy is truthy so actually these examples in the second example are second operand is a string with four characters so this is not an empty string it's not falsie so it's true see so when are JavaScript engine tries to evaluate this it looks at the first opera and it's false so the search continues because with the logical or operator as you learn in the last lecture as long as one of the operands is true the result will be true now here in our second example the first operand is false so the search continues hoping that maybe the other operand is true or truthy in this case we're dealing with a juicy so this value is immediately returned the same goes for the third example so here one is not a Boolean true it's true see that's why the value of this operand is returned now what if we have an expression like this false or one or two what do you think we're going to get let's take a look we get one so this is another thing you need to understand about the logical or operator the evaluation starts here as soon as we find an opera that is true see that operant is returned so here are second operand is choosy it's value is return and here the evaluation stops it doesn't matter what we have on the right side we could have a million other parents they are completely ignored this is what we call short circuiting short circuiting just exactly like short circuit thing that we have in electricity now you understand how this logical operators work with non Boolean values let me give you a real world example when to use this so let's imagine we're building an application and somewhere the user has to pick a color or we're going to use a default color maybe this is the color of the T-shirt they want to buy so I'm going to declare a few variables user color we said that to read default color blue and current color which was set to user color or default color now let's read this expression in plain English user color or default color that basically means if we have a value for users are going to use that if you don't then use the default color now let's log this on the console so current color we get red because are user has selected a color in contrast if the user has not selected the color let's set this to undefined save the changes we get blue because the fall color is blue so this is the power of using the logical or operator between non boolean's with this technique we can provide the fault values so if the user has selected a color we're going to use that otherwise we're going to use our default color and then determines the current color which we're going to display on the screen